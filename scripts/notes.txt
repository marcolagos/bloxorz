import './style.css';
import * as THREE from 'three';
import { MathUtils, RedFormat } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { TWEEN } from 'three/examples/jsm/libs/tween.module.min'


// renderer is set to the canvas
const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
// scene
const scene = new THREE.Scene();
const renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#bg'),
        });
// orbit controls
const controls = new OrbitControls(camera, renderer.domElement);

function init() {

        // camera
        camera.position.setZ(30);
        camera.position.setY(15);

        // renderer made from the scene and camera
        // the pixel ratio and the size of the window is set
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.render( scene, camera );

        // light
        const light = new THREE.HemisphereLight(0xB1E1FF, 0xB97A20, 1);
        scene.add(light);

        // const axesHelper = new THREE.AxesHelper(50);
        // axesHelper.position.x = -100;
        // axesHelper.position.y = -5;
        // axesHelper.position.z = -2.5;
        // scene.add(axesHelper);
        const gridHelper = new THREE.GridHelper(50);
        gridHelper.position.x = -2.5;
        gridHelper.position.y = -5;
        gridHelper.position.z = -2.5;
        scene.add(gridHelper);

}

// const prismGroup = new THREE.Group();
const prismWidth = 5;
const prismHeight = 10;
const geometry = new THREE.BoxGeometry( prismWidth, prismHeight, prismWidth );
const material = new THREE.MeshStandardMaterial({color: 0x39ff14});
const prism = new THREE.Mesh( geometry, material );

scene.add(prism);
renderer.render( scene, camera );

function printPosition() {
        console.log("PRISM POSITION");
        console.log("X:" + prism.position.x);
        console.log("Y:" + prism.position.y);
        console.log("Z:" + prism.position.z);
        console.log("PRISM GEOMETRY POSITION");
        console.log("H:" + prism.geometry.parameters.height);
        console.log("W:" + prism.geometry.parameters.width);
        console.log("D:" + prism.geometry.parameters.depth);
        console.log(prism);
}

function translate(x,y,z) {
        prism.position.x = x;
        prism.position.y = y;
        prism.position.z = z;
}

const rotate90 = THREE.MathUtils.degToRad(-90);

function move() {window.addEventListener('keydown', (event) => {
                var key = event.key;
                if(key === "ArrowRight"){
                        // prism.geometry.applyMatrix4( new THREE.Matrix4().makeTranslation( -2.5, 5, -2.5 ) );
                        // translate(2.5, -5, 2.5);
                        // var rotate = new TWEEN.Tween(prism.rotation).to({x: prism.rotation.x, y: prism.rotation.y, z: prism.rotation.z - THREE.MathUtils.degToRad(90)}, 200).start();
                        console.log(prism.geometry);
                        var rotate = new TWEEN.Tween(prism.rotation).to({x: prism.rotation.x, y: prism.rotation.y, z: prism.rotation.z + rotate90}, 200).start();
                        console.log(prism.geometry);
                        
                }
                if(key === "ArrowLeft"){
                        // prism.geometry.applyMatrix4( new THREE.Matrix4().makeTranslation( 2.5, 5, 2.5 ) );
                        // translate(-2.5, -5, -2.5);
                        // var rotate = new TWEEN.Tween(prism.rotation).to({x: prism.rotation.x, y: prism.rotation.y, z: prism.rotation.z - THREE.MathUtils.degToRad(-90)}, 200).start();
                        var rotate = new TWEEN.Tween(prism.rotation).to({x: prism.rotation.x, y: prism.rotation.y, z: prism.rotation.z - rotate90}, 200).start();

                }
                if(key === "ArrowUp"){
                        var rotate = new TWEEN.Tween(prism.rotation).to({x: prism.rotation.x + rotate90, y: prism.rotation.y, z: prism.rotation.z}, 200).start();
                        
                }
                if(key === "ArrowDown"){
                        var rotate = new TWEEN.Tween(prism.rotation).to({x: prism.rotation.x - rotate90, y: prism.rotation.y, z: prism.rotation.z}, 200).start();
                }
        })
}

// for 

function animate() {
  requestAnimationFrame( animate );
  controls.update();
  TWEEN.update()
  renderer.render( scene, camera );
}

init();
animate();
move();


prismWidth = objectWidth;
      prismHeight = objectHeight;
      prismDepth = objectDepth;
      prismCoordinates = [ [0 , 0] , [prismWidth , 0] , [0 , prismDepth] , [prismWidth , prismDepth] ];
      prismOrientation = true;
      const geometry = new THREE.BoxGeometry( prismWidth, prismHeight, prismDepth );
      geometry.applyMatrix4( new THREE.Matrix4().makeTranslation( prismWidth / 2, prismHeight / 2, prismDepth / 2 ) ); // default position
      const material = new THREE.MeshStandardMaterial({color: 0x39ff14, wireframe: false});
      prism = new THREE.Mesh( geometry, material );
      scene.add(prism);





const geometry = new THREE.BoxGeometry(5, 10, 5);
    const material = new THREE.MeshPhongMaterial({
      color: 0x156289,
      emissive: 0x072534,
      side: THREE.DoubleSide,
      flatShading: true,
    });
    this.cube = new THREE.Mesh(geometry, material);
    this.scene.add(this.cube);

    /*
level {
      grid size: x, y
      plate booleans: array of x * y size, where each entry has a plate, true, false, 0, 1
      starting plate: 
      
}
*/


import React, { Component } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import * as LEVEL from "./Level";

class App extends Component {
  componentDidMount() {
    this.sceneSetup();
    this.addSceneObjects();
    this.animationLoop();
    window.addEventListener("resize", this.handleWindowResize);
  }

  sceneSetup = () => {
    // get container dimensions and use them for scene sizing
    const width = this.container.clientWidth;
    const height = this.container.clientHeight;
    
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(
      75, // fov = field of view
      width / height, // aspect ratio
      0.1, // near plane
      1000 // far plane
    );
    this.camera.position.y = 15;
    this.camera.position.z = 30;

    this.controls = new OrbitControls(this.camera, this.container);

    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(width, height);
    this.container.appendChild(this.renderer.domElement);

    const lights = [];
    lights[0] = new THREE.PointLight(0xffffff, 1, 0);
    lights[1] = new THREE.PointLight(0xffffff, 1, 0);
    lights[2] = new THREE.PointLight(0xffffff, 1, 0);

    lights[0].position.set(0, 200, 0);
    lights[1].position.set(100, 200, 100);
    lights[2].position.set(-100, -200, -100);

    this.scene.add(lights[0]);
    this.scene.add(lights[1]);
    this.scene.add(lights[2]);

    const axesHelper = new THREE.AxesHelper(50);
    this.scene.add(axesHelper);

    const gridHelper = new THREE.GridHelper(50);
    this.scene.add(gridHelper);
  };


  addSceneObjects = () => {
      const level = {
            layout: [
                    [0,0,0,null,null,null,null,null,null,null,null], 
                    [0,1,0,0,0,0,null,null,null,null,null],
                    [0,0,0,0,0,0,0,0,0,null,null],
                    [null,0,0,0,0,0,0,0,0,0,0],
                    [null,null,null,null,null,null,0,0,-1,0,0],
                    [null,null,null,null,null,null,null,0,0,0,null]
                    ],
                  };
      <LEVEL level={level}/>
  };

  animationLoop = () => {
    this.renderer.render(this.scene, this.camera);
    this.requestID = window.requestAnimationFrame(this.animationLoop);
  };

  handleWindowResize = () => {
    const width = this.container.clientWidth;
    const height = this.container.clientHeight;

    this.renderer.setSize(width, height);
    this.camera.aspect = width / height;

    this.camera.updateProjectionMatrix();
  };

  render() {
    return (
      <div
        style={{ height: window.innerHeight, width: window.innerWidth }}
        ref={(ref) => (this.container = ref)}
      />
    );
  }
}

export default App;
